/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package oekosdb;

import java.awt.BorderLayout;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.*;
import java.time.Clock;
import java.time.ZoneId;
import java.sql.Statement;
import java.util.Vector;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.RowFilter;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Natty Workstation
 */
public class OekosDB_Manager extends javax.swing.JFrame {

    /**
     * Creates new form OekosDB_Manager
     */

    public OekosDB_Manager() {
        initComponents();
        updateManagerDB();
        
        searchTXT.getDocument().addDocumentListener(new DocumentListener(){
            @Override
            public void insertUpdate(DocumentEvent e) {
                String text = searchTXT.getText();

                if (text.trim().length() == 0) {
                    updateManagerDB();
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                String text = searchTXT.getText();

                if (text.trim().length() == 0) {
                    updateManagerDB();
                }
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                String text = searchTXT.getText();

                if (text.trim().length() == 0) {
                    updateManagerDB();
                }
            }
        
        });            
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    //Functions
        final String ID = "nyap1";
        final String PW = "COSC*i4fwc";
        final String SERVER = "jdbc:mysql://triton.towson.edu:3360/?serverTimezone=EST#/nyap1db";
    public void updateManagerDB(){
        try{
            Class.forName("com.mysql.cj.jdbc.Driver");
        }catch (ClassNotFoundException e){
            System.out.println(e);
        }

        
        int q;
        
        try {
            Connection con = DriverManager.getConnection(SERVER, ID, PW);
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * FROM nyap1db.Manager");

            ResultSetMetaData stdata = rs.getMetaData();
            
            q = stdata.getColumnCount();
            
            DefaultTableModel RecordTable = (DefaultTableModel)jTable1.getModel();
                    RecordTable.setRowCount(0);
            
            while(rs.next()){
                Vector columnData = new Vector();
                
                for (int i = 0; i <= q; i++ ){
                    columnData.add(rs.getString("managerID"));
                    columnData.add(rs.getString("managerFName"));
                    columnData.add(rs.getString("managerLName"));
                    columnData.add(rs.getString("managerAddress"));
                    columnData.add(rs.getString("managerPhone"));
                }
                RecordTable.addRow(columnData);
            }
        }catch (SQLException e){
            JOptionPane.showMessageDialog(null, e);
        }
    }//end of update manager
    
    
    //end of Functions
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        addBTN = new javax.swing.JButton();
        updateBTN = new javax.swing.JButton();
        deleteBTN = new javax.swing.JButton();
        clearBTN = new javax.swing.JButton();
        exitBTN = new javax.swing.JButton();
        propBTN = new javax.swing.JButton();
        leaseBTN = new javax.swing.JButton();
        invoiceBTN = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        idTXT = new javax.swing.JTextField();
        fnameTXT = new javax.swing.JTextField();
        addressTXT = new javax.swing.JTextField();
        numberTXT = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        lnameTXT = new javax.swing.JTextField();
        searchTXT = new javax.swing.JTextField();
        searchBTN = new javax.swing.JButton();
        searchComboBox = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

        addBTN.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        addBTN.setText("Add");
        addBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBTNActionPerformed(evt);
            }
        });

        updateBTN.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        updateBTN.setText("Update");
        updateBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBTNActionPerformed(evt);
            }
        });

        deleteBTN.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        deleteBTN.setText("Delete");
        deleteBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBTNActionPerformed(evt);
            }
        });

        clearBTN.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        clearBTN.setText("Clear");
        clearBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBTNActionPerformed(evt);
            }
        });

        exitBTN.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        exitBTN.setText("Exit");
        exitBTN.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        exitBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBTNActionPerformed(evt);
            }
        });

        propBTN.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        propBTN.setText("Properties");
        propBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                propBTNActionPerformed(evt);
            }
        });

        leaseBTN.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        leaseBTN.setText("Leases");
        leaseBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leaseBTNActionPerformed(evt);
            }
        });

        invoiceBTN.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        invoiceBTN.setText("Invoices");
        invoiceBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invoiceBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(updateBTN, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                    .addComponent(deleteBTN, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                    .addComponent(clearBTN, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                    .addComponent(exitBTN, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                    .addComponent(propBTN, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                    .addComponent(leaseBTN, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                    .addComponent(invoiceBTN, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(updateBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(deleteBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(clearBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(propBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(leaseBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(invoiceBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(exitBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 100, 160, 450));

        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Arial", 1, 48)); // NOI18N
        jLabel1.setText("Oekos Database (Manager)");
        jPanel3.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, 60));

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 740, 80));

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Last Name:");
        jPanel4.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(288, 54, -1, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Address:");
        jPanel4.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(61, 86, -1, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("ID:");
        jPanel4.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 22, -1, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Phone Number:");
        jPanel4.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(13, 118, -1, -1));

        jTable1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "managerID", "First Name", "Last Name", "Address", "Phone"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel4.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(13, 156, 544, 250));

        idTXT.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        idTXT.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        idTXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idTXTActionPerformed(evt);
            }
        });
        jPanel4.add(idTXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(126, 21, 431, -1));

        fnameTXT.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        fnameTXT.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel4.add(fnameTXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(126, 53, 158, -1));

        addressTXT.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        addressTXT.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel4.add(addressTXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(126, 85, 431, -1));

        numberTXT.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        numberTXT.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        numberTXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numberTXTActionPerformed(evt);
            }
        });
        jPanel4.add(numberTXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(126, 117, 431, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("First Name:");
        jPanel4.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(43, 54, -1, -1));

        lnameTXT.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lnameTXT.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel4.add(lnameTXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 53, 187, -1));

        searchTXT.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        searchTXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTXTActionPerformed(evt);
            }
        });
        jPanel4.add(searchTXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 410, 350, -1));

        searchBTN.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        searchBTN.setText("Search");
        searchBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBTNActionPerformed(evt);
            }
        });
        jPanel4.add(searchBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 410, -1, -1));

        searchComboBox.setFont(new java.awt.Font("Tahoma", 0, 12));
        searchComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ID", "First Name", "Last Name", "Address", "Phone" }));
        jPanel4.add(searchComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(16, 410, 100, -1));

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 570, 450));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 760, 560));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBTNActionPerformed

        try {
            Connection con = DriverManager.getConnection(SERVER, ID, PW);
            PreparedStatement pstmt = con.prepareStatement("INSERT INTO nyap1db.Manager" 
                    +" (managerID, managerFName, managerLName, managerAddress, managerPhone) "
                    +"VALUES (?, ?, ?, ?, ?)");
            
            pstmt.setString(1, idTXT.getText());
            pstmt.setString(2, fnameTXT.getText());
            pstmt.setString(3, lnameTXT.getText());
            pstmt.setString(4, addressTXT.getText());
            pstmt.setString(5, numberTXT.getText());
            
            pstmt.executeUpdate();
            JOptionPane.showMessageDialog(this, "Manager Added");
            updateManagerDB();
            
        }catch (SQLException e){
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_addBTNActionPerformed

    private void updateBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBTNActionPerformed
        // TODO: figure out how to update managerID
        try {
            Connection con = DriverManager.getConnection(SERVER, ID, PW);
            PreparedStatement pstmt = con.prepareStatement("UPDATE nyap1db.Manager "
                +"SET managerFName = ?, managerLName = ?, "
                +"managerAddress = ?, managerPhone = ? WHERE managerID = ?");
            
            pstmt.setString(1, fnameTXT.getText());
            pstmt.setString(2, lnameTXT.getText());
            pstmt.setString(3, addressTXT.getText());
            pstmt.setString(4, numberTXT.getText());
            pstmt.setString(5, idTXT.getText());
            
            pstmt.executeUpdate();
            JOptionPane.showMessageDialog(this, "Manager Updated");
            updateManagerDB();
            
        }catch (SQLException e){
            JOptionPane.showMessageDialog(null, e);
        }
        
        
    }//GEN-LAST:event_updateBTNActionPerformed

    private void deleteBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBTNActionPerformed
        // TODO add your handling code here:
        DefaultTableModel RecordTable = (DefaultTableModel)jTable1.getModel();
        int SelectedRow = jTable1.getSelectedRow();
        
        try{
            int id = Integer.parseInt(RecordTable.getValueAt(SelectedRow, 0).toString());
            
            //warning before delete pop-up
            frame = new JFrame("Delete");
            
            if(JOptionPane.showConfirmDialog(frame, "Are you sure you want"
                    + " to delete this entry?", "WARNING", JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION){
                
                Connection con = DriverManager.getConnection(SERVER, ID, PW);
                
                PreparedStatement pstmt = con.prepareStatement("DELETE from nyap1db.Manager "
                    +"WHERE managerID = ?");

                pstmt.setString(1, idTXT.getText());

                pstmt.executeUpdate();
                JOptionPane.showMessageDialog(this, "Manager Deleted");
                
                updateManagerDB();
                //clears the text fields
                idTXT.setText("");
                fnameTXT.setText("");
                lnameTXT.setText("");
                addressTXT.setText("");
                numberTXT.setText("");             
            }
        }catch (SQLException e){
            JOptionPane.showMessageDialog(null, e);
        }
        
    }//GEN-LAST:event_deleteBTNActionPerformed

    private void clearBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBTNActionPerformed
        // TODO add your handling code here:
        idTXT.setText("");
        fnameTXT.setText("");
        lnameTXT.setText("");
        addressTXT.setText("");
        numberTXT.setText("");
    }//GEN-LAST:event_clearBTNActionPerformed
    
    JFrame frame; 
    
    private void exitBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBTNActionPerformed
        // TODO add your handling code here:
        frame = new JFrame("Exit");
        if (JOptionPane.showConfirmDialog(frame, "Are you sure you want to exit?", "OekosDB",
                JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION){
            System.exit(0);
        }
    }//GEN-LAST:event_exitBTNActionPerformed

    private void propBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_propBTNActionPerformed
        // Window pops up with table that displays properties handled by a particular manager
        JFrame propFrame = new JFrame("Properties");
        propFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        JScrollPane jScrollPane2 = new javax.swing.JScrollPane();
        
        propTable = new javax.swing.JTable();
        propTable.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        propTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] { //add "landlordID"
                "propertyID", "Name", "Address"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        try {
            Connection con = DriverManager.getConnection(SERVER, ID, PW);
            Statement stmt = con.createStatement();
            PreparedStatement pstmt = con.prepareStatement("SELECT * FROM nyap1db.Property WHERE manID = ?");
            
            pstmt.setString(1, idTXT.getText());
            ResultSet rs = pstmt.executeQuery();
            ResultSetMetaData stdata = rs.getMetaData();
            
            int q = stdata.getColumnCount();
            
            DefaultTableModel RecordTable = (DefaultTableModel)propTable.getModel();
                    RecordTable.setRowCount(0);
            
            while(rs.next()){
                Vector columnData = new Vector();
                
                for (int i = 0; i <= q; i++ ){
                    columnData.add(rs.getString("propertyID"));
                    columnData.add(rs.getString("propName"));
                    columnData.add(rs.getString("propAddress"));
                    //columnData.add(rs.getString("landID"));
                }
                RecordTable.addRow(columnData);
            }
        }catch (SQLException e){
            JOptionPane.showMessageDialog(null, e);
        }
        jScrollPane2.setViewportView(propTable);
        propFrame.getContentPane().add(jScrollPane2, BorderLayout.CENTER);
        propFrame.pack();
        propFrame.setVisible(true);
        
    }//GEN-LAST:event_propBTNActionPerformed

    private void leaseBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leaseBTNActionPerformed
        // TODO add the rest of the table information
        JFrame leaseFrame = new JFrame("Leases");
        leaseFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        JScrollPane jScrollPane3 = new javax.swing.JScrollPane();
        
        leaseTable = new javax.swing.JTable();
        leaseTable.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        leaseTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] { //add "landlordID", "suiteID", "venID"
                "leaseID", "Occupancy Status", "Start Date", "End Date", "propertyID" 
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        try {
            Connection con = DriverManager.getConnection(SERVER, ID, PW);
            Statement stmt = con.createStatement();
            PreparedStatement pstmt = con.prepareStatement("SELECT * FROM nyap1db.Lease WHERE manID = ?");
            
            pstmt.setString(1, idTXT.getText()); //gets the managerID from the textbox
            
            ResultSet rs = pstmt.executeQuery();
            ResultSetMetaData stdata = rs.getMetaData();
            
            int q = stdata.getColumnCount();
            
            DefaultTableModel RecordTable = (DefaultTableModel)propTable.getModel();
                    RecordTable.setRowCount(0);
            
            while(rs.next()){
                Vector columnData = new Vector();
                
                for (int i = 0; i <= q; i++ ){
                    columnData.add(rs.getString("leaseID"));
                    columnData.add(rs.getString("occupancy_status"));
                    columnData.add(rs.getString("start_date"));
                    columnData.add(rs.getString("expiration_date"));
                    columnData.add(rs.getString("propID"));
                }
                RecordTable.addRow(columnData);
            }
        }catch (SQLException e){
            JOptionPane.showMessageDialog(null, e);
        }
        jScrollPane3.setViewportView(propTable);
        leaseFrame.getContentPane().add(jScrollPane3, BorderLayout.CENTER);
        leaseFrame.pack();
        leaseFrame.setVisible(true);
    }//GEN-LAST:event_leaseBTNActionPerformed

    private void invoiceBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invoiceBTNActionPerformed
        // TODO add the rest of the table attributes
        JFrame invoiceFrame = new JFrame("Invoices");
        invoiceFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        JScrollPane jScrollPane4 = new javax.swing.JScrollPane();
        
        invoiceTable = new javax.swing.JTable();
        invoiceTable.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        invoiceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] { //add "landlordID", "suiteID", "venID"
                "Invoice No.", "Due Date", "Expense Period", "Total Amount", "Amount Paid" 
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        try {
            Connection con = DriverManager.getConnection(SERVER, ID, PW);
            Statement stmt = con.createStatement();
            PreparedStatement pstmt = con.prepareStatement("SELECT * FROM nyap1db.Invoice WHERE manID = ?");
            
            pstmt.setString(1, idTXT.getText()); //gets the managerID from the textbox
            
            ResultSet rs = pstmt.executeQuery();
            ResultSetMetaData stdata = rs.getMetaData();
            
            int q = stdata.getColumnCount();
            
            DefaultTableModel RecordTable = (DefaultTableModel)propTable.getModel();
                    RecordTable.setRowCount(0);
            
            while(rs.next()){
                Vector columnData = new Vector();
                
                for (int i = 0; i <= q; i++ ){
                    columnData.add(rs.getString("invoiceNo"));
                    columnData.add(rs.getString("due_date"));
                    columnData.add(rs.getString("expense_period"));
                    columnData.add(rs.getString("total_amount"));
                    columnData.add(rs.getString("amount_paid"));
                }
                RecordTable.addRow(columnData);
            }
        }catch (SQLException e){
            JOptionPane.showMessageDialog(null, e);
        }
        jScrollPane4.setViewportView(propTable);
        invoiceFrame.getContentPane().add(jScrollPane4, BorderLayout.CENTER);
        invoiceFrame.pack();
        invoiceFrame.setVisible(true);
    }//GEN-LAST:event_invoiceBTNActionPerformed

    private void numberTXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numberTXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_numberTXTActionPerformed

    private void idTXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idTXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idTXTActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked

        DefaultTableModel RecordTable = (DefaultTableModel)jTable1.getModel();
        int selectedRow = jTable1.getSelectedRow();

        //populate form with the data from the selected row
        idTXT.setText(RecordTable.getValueAt(selectedRow, 0).toString());
        fnameTXT.setText(RecordTable.getValueAt(selectedRow, 1).toString());
        lnameTXT.setText(RecordTable.getValueAt(selectedRow, 2).toString());
        addressTXT.setText(RecordTable.getValueAt(selectedRow, 3).toString());
        numberTXT.setText(RecordTable.getValueAt(selectedRow, 4).toString());
    }//GEN-LAST:event_jTable1MouseClicked

    private void searchTXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchTXTActionPerformed

    private void searchBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBTNActionPerformed
        // TODO add your handling code here:
        searchTXT.getText();
        try {
            Connection con = DriverManager.getConnection(SERVER, ID, PW);
            PreparedStatement pstmt;
            ResultSet rs;
            ResultSetMetaData stdata;
            DefaultTableModel RecordTable = (DefaultTableModel)jTable1.getModel();
            int q;
            
            //"First Name", "Last Name", "Address", "Phone"
            switch(searchComboBox.getSelectedItem().toString()){
                case "ID":
                    pstmt = con.prepareStatement("SELECT * FROM nyap1db.Manager "
                    +"WHERE managerID = ?");
                    pstmt.setString(1, searchTXT.getText());
                    rs = pstmt.executeQuery();
                    stdata = rs.getMetaData();
                    RecordTable.setRowCount(0);
                    q = stdata.getColumnCount();

                    while(rs.next()){
                        Vector columnData = new Vector();

                        for (int i = 0; i <= q; i++ ){
                            columnData.add(rs.getString("managerID"));
                            columnData.add(rs.getString("managerFName"));
                            columnData.add(rs.getString("managerLName"));
                            columnData.add(rs.getString("managerAddress"));
                            columnData.add(rs.getString("managerPhone"));
                        }
                        RecordTable.addRow(columnData);
                    }
                    break;
                case "First Name":
                    pstmt = con.prepareStatement("SELECT * FROM nyap1db.Manager "
                    +"WHERE managerFName LIKE ?");
                    pstmt.setString(1, "%" + searchTXT.getText() + "%");
                    rs = pstmt.executeQuery();
                    stdata = rs.getMetaData();
                    RecordTable.setRowCount(0);
                    q = stdata.getColumnCount();

                    while(rs.next()){
                        Vector columnData = new Vector();

                        for (int i = 0; i <= q; i++ ){
                            columnData.add(rs.getString("managerID"));
                            columnData.add(rs.getString("managerFName"));
                            columnData.add(rs.getString("managerLName"));
                            columnData.add(rs.getString("managerAddress"));
                            columnData.add(rs.getString("managerPhone"));
                        }
                        RecordTable.addRow(columnData);
                    }
                    break;
                case "Last Name":
                    pstmt = con.prepareStatement("SELECT * FROM nyap1db.Manager "
                    +"WHERE managerLName LIKE ?");
                    pstmt.setString(1, "%" + searchTXT.getText() + "%");
                    rs = pstmt.executeQuery();
                    stdata = rs.getMetaData();
                    RecordTable.setRowCount(0);
                    q = stdata.getColumnCount();

                    while(rs.next()){
                        Vector columnData = new Vector();

                        for (int i = 0; i <= q; i++ ){
                            columnData.add(rs.getString("managerID"));
                            columnData.add(rs.getString("managerFName"));
                            columnData.add(rs.getString("managerLName"));
                            columnData.add(rs.getString("managerAddress"));
                            columnData.add(rs.getString("managerPhone"));
                        }
                        RecordTable.addRow(columnData);
                    }
                    break;
                case "Address":
                    pstmt = con.prepareStatement("SELECT * FROM nyap1db.Manager "
                    +"WHERE managerAddress LIKE ?");
                    pstmt.setString(1, "%" + searchTXT.getText() + "%");
                    rs = pstmt.executeQuery();
                    stdata = rs.getMetaData();
                    RecordTable.setRowCount(0);
                    q = stdata.getColumnCount();

                    while(rs.next()){
                        Vector columnData = new Vector();

                        for (int i = 0; i <= q; i++ ){
                            columnData.add(rs.getString("managerID"));
                            columnData.add(rs.getString("managerFName"));
                            columnData.add(rs.getString("managerLName"));
                            columnData.add(rs.getString("managerAddress"));
                            columnData.add(rs.getString("managerPhone"));
                        }
                        RecordTable.addRow(columnData);
                    }
                    break;
                case "Phone":
                    pstmt = con.prepareStatement("SELECT * FROM nyap1db.Manager "
                    +"WHERE managerPhone LIKE ?");
                    pstmt.setString(1, "%" + searchTXT.getText() + "%");
                    rs = pstmt.executeQuery();
                    stdata = rs.getMetaData();
                    q = stdata.getColumnCount();
            
                    RecordTable.setRowCount(0);

                    while(rs.next()){
                        Vector columnData = new Vector();

                        for (int i = 0; i <= q; i++ ){
                            columnData.add(rs.getString("managerID"));
                            columnData.add(rs.getString("managerFName"));
                            columnData.add(rs.getString("managerLName"));
                            columnData.add(rs.getString("managerAddress"));
                            columnData.add(rs.getString("managerPhone"));
                        }
                        RecordTable.addRow(columnData);
                    }
                    break;
            }
            
     
        }catch (SQLException e){
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_searchBTNActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OekosDB_Manager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OekosDB_Manager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OekosDB_Manager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OekosDB_Manager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OekosDB_Manager().setVisible(true);
            }
        });
        
    }
    private javax.swing.JTable propTable;
    private javax.swing.JTable leaseTable;
    private javax.swing.JTable invoiceTable;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBTN;
    private javax.swing.JTextField addressTXT;
    private javax.swing.JButton clearBTN;
    private javax.swing.JButton deleteBTN;
    private javax.swing.JButton exitBTN;
    private javax.swing.JTextField fnameTXT;
    private javax.swing.JTextField idTXT;
    private javax.swing.JButton invoiceBTN;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton leaseBTN;
    private javax.swing.JTextField lnameTXT;
    private javax.swing.JTextField numberTXT;
    private javax.swing.JButton propBTN;
    private javax.swing.JButton searchBTN;
    private javax.swing.JComboBox<String> searchComboBox;
    private javax.swing.JTextField searchTXT;
    private javax.swing.JButton updateBTN;
    // End of variables declaration//GEN-END:variables
}

